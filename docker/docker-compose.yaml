# include:
#   - path: docker-compose-traefik.yaml
#   - path: docker-compose-middleware.yaml
services:
  traefik:
    image: traefik:v3.1.2 
    restart: unless-stopped
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../conf/traefik/traefik.yaml:/etc/traefik/traefik.yaml  # static traefik configuration
      - ../conf/traefik/dynamic:/etc/traefik/dynamic  # dynamic traefik configuration
    labels:
      - "traefik.enable=true"

      # define traefik dashboard router and service
      - "traefik.http.routers.traefik.rule=Host(`dashboard.example.com`)" # change hostname!
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=test:$$2y$$12$$ci.4U63YX83CwkyUrjqxAucnmi2xXOIlEF6T/KdP9824f1Rf1iyNG" # credentials test:test

    networks:
      - traefik-network
    environment:
      - TZ=Asia/Shanghai
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    healthcheck:
        # Run traefik healthcheck command
        # https://doc.traefik.io/traefik/operations/cli/#healthcheck
        test: ["CMD", "traefik", "healthcheck", "--ping"]
        interval: 10s
        timeout: 5s
        retries: 3
        start_period: 5s

  db:
    container_name: db
    image: postgres:16-alpine
    ports:
      - 5432
    restart: always
    shm_size: 128mb
    volumes:
      - db_data:/var/lib/postgresql/data
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    environment:
      TZ: Asia/Shanghai
      POSTGRES_DB: refly
      POSTGRES_USER: refly
      POSTGRES_PASSWORD: test
      POSTGRES_MAX_CONNECTIONS: 150
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1024MB
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U refly -d refly']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - refly-network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - 9000
      - 9001
    volumes:
      - minio_data:/data
    environment:
      TZ: Asia/Shanghai
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # MINIO_DOMAIN: minio.example.com
      MINIO_COMPRESSION_ENABLE: 'on'
      MINIO_COMPRESSION_ALLOW_ENCRYPTION: 'off'
      MINIO_API_ROOT_ACCESS: 'on'
      # refs: https://min.io/docs/minio/linux/reference/minio-server/settings/console.html
      MINIO_BROWSER: 'on'
      MINIO_BROWSER_LOGIN_ANIMATION: 'off'
      MINIO_BROWSER_REDIRECT: 'false'
      MINIO_BROWSER_SESSION_DURATION: '365d'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  redis:
    container_name: redis
    image: redis/redis-stack:latest
    restart: always
    networks:
      - refly-network
    ports:
      - 6379
      - 8001
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --save 60 1000 --appendonly yes
    environment:
      TZ: Asia/Shanghai
      REDIS_PASSWORD: refly
      REDISTIMESERIES_ARGS: "RETENTION_POLICY=20"
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  qdrant:
    container_name: qdrant
    image: reflyai/qdrant:v1.13.1
    networks:
      - refly-network
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    ports:
      - 6333
      - 6334
    volumes:
      - qdrant_data:/qdrant/storage:z
    restart: always
    environment:
      TZ: Asia/Shanghai
    healthcheck:
      test: ['CMD-SHELL', "curl -s http://localhost:6333/healthz | grep -q 'healthz check passed' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  elasticsearch:
    container_name: elasticsearch
    image: reflyai/elasticsearch:7.10.2
    networks:
      - refly-network
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    ports:
      - 9200
    environment:
      TZ: Asia/Shanghai
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:-elasticpwd}
      cluster.name: es-cluster
      node.name: es-node01
      discovery.type: single-node
      xpack.license.self_generated.type: basic
      xpack.security.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'curl -s http://localhost:9200 >/dev/null || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  api:
    image: reflyai/refly-api:0.4.2
    container_name: api
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    working_dir: /app/apps/api/dist
    # logging
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1

    restart: always


    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    command: >
      sh -c "node scripts/sync-db-schema.js && node main.js"
    networks:
    - refly-network
    ports:
      - 5800
      - 5801


    environment:
      # ----------------------------------------------
      # Required Environment Variables for API service
      # ----------------------------------------------
      TZ: ${TZ:-Asia/Shanghai}
      # Embeddings provider (options: jina, openai, fireworks)
      EMBEDDINGS_PROVIDER: ${EMBEDDINGS_PROVIDER:-jina}

      # Name of the embeddings model to use
      EMBEDDINGS_MODEL_NAME: ${EMBEDDINGS_MODEL_NAME:-jina-embeddings-v3}

      # OpenAI-compatible API base URL
      OPENAI_BASE_URL: ${OPENAI_BASE_URL :-}

      # OpenAI-compatible API key, used for LLM inference and embeddings
      OPENAI_API_KEY: ${OPENAI_API_KEY :-}

      # OpenRouter API key, used for LLM inference
      # will take precedence over OPENAI_API_KEY for LLM inference if set
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY :-}

      # Jina API key, used for embeddings
      JINA_API_KEY: ${JINA_API_KEY :-}

      # Fireworks API key, used for embeddings
      FIREWORKS_API_KEY: ${FIREWORKS_API_KEY :-}

      # Serper API key (https://serper.dev/), used for web search
      SERPER_API_KEY: ${SERPER_API_KEY :-}

      # ----------------------------------------------
      # Optional Environment Variables for API service
      # (will have reasonable default values)
      # ----------------------------------------------

      # General Configuration
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-5800}
      WS_PORT: ${WS_PORT:-5801}
      ORIGIN: ${ORIGIN:-http://web:5700}

      # Static Endpoint Configuration
      STATIC_PUBLIC_ENDPOINT: ${STATIC_PUBLIC_ENDPOINT:-http://api:5800/v1/misc/public}
      STATIC_PRIVATE_ENDPOINT: ${STATIC_PRIVATE_ENDPOINT:-http://api:5800/v1/misc}

      # Redis Configuration
      # host: redis
      # port: 6379
      # password: ''
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-refly}

      # Database Configuration
      # user: refly_admin
      # password: refly_pwd
      # database: refly
      # schema: refly_schema
      DATABASE_URL: ${DATABASE_URL:-postgres://refly_admin:refly_pwd@db:5432/refly?schema=refly_schema}

      # Vector Store Configuration
      # host: qdrant
      # port: 6333
      # api_key: ''
      QDRANT_HOST: ${QDRANT_HOST:-qdrant}
      QDRANT_PORT: ${QDRANT_PORT:-6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
      REFLY_VEC_DIM: 768

      # Elasticsearch Configuration
      # url: http://elasticsearch:9200
      # username: elastic
      # password: ''
      ELASTICSEARCH_URL: ${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME:-elastic}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD:-}


      # MinIO Configuration
      # host: minio
      # port: 9000
      # use_ssl: false
      # access_key: ''
      # secret_key: ''
      # internal bucket: refly-internal
      # external bucket: refly-external
      MINIO_INTERNAL_ENDPOINT: ${MINIO_INTERNAL_ENDPOINT:-minio}
      MINIO_INTERNAL_PORT: ${MINIO_INTERNAL_PORT:-9000}
      MINIO_INTERNAL_USE_SSL: ${MINIO_INTERNAL_USE_SSL:-false}
      MINIO_INTERNAL_ACCESS_KEY: ${MINIO_INTERNAL_ACCESS_KEY:-}
      MINIO_INTERNAL_SECRET_KEY: ${MINIO_INTERNAL_SECRET_KEY:-}
      MINIO_INTERNAL_BUCKET: ${MINIO_INTERNAL_BUCKET:-refly-internal}

      MINIO_EXTERNAL_ENDPOINT: ${MINIO_EXTERNAL_ENDPOINT:-minio}
      MINIO_EXTERNAL_PORT: ${MINIO_EXTERNAL_PORT:-9000}
      MINIO_EXTERNAL_USE_SSL: ${MINIO_EXTERNAL_USE_SSL:-false}
      MINIO_EXTERNAL_ACCESS_KEY: ${MINIO_EXTERNAL_ACCESS_KEY:-}
      MINIO_EXTERNAL_SECRET_KEY: ${MINIO_EXTERNAL_SECRET_KEY:-}
      MINIO_EXTERNAL_BUCKET: ${MINIO_EXTERNAL_BUCKET:-refly-external}

      # Authentication Configuration
      AUTH_SKIP_VERIFICATION: ${AUTH_SKIP_VERIFICATION:-false}
      REFLY_COOKIE_DOMAIN: ${REFLY_COOKIE_DOMAIN:-}
      REFLY_COOKIE_SECURE: ${REFLY_COOKIE_SECURE:-}
      REFLY_COOKIE_SAME_SITE: ${REFLY_COOKIE_SAME_SITE:-}
      LOGIN_REDIRECT_URL: ${LOGIN_REDIRECT_URL:-}
      JWT_SECRET: ${JWT_SECRET:-a_random_jwt_secret}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-6h}
      JWT_REFRESH_EXPIRATION_TIME: ${JWT_REFRESH_EXPIRATION_TIME:-7d}

      # Parser for PDF files (options: pdfjs, marker)
      PARSER_PDF: ${PARSER_PDF:-pdfjs}

      # Marker API key (https://www.datalab.to/), required if PARSER_PDF=marker
      MARKER_API_KEY: ${MARKER_API_KEY:-}

      # Collaboration Configuration
      COLLAB_TOKEN_EXPIRY: ${COLLAB_TOKEN_EXPIRY:-12h}

      # Email Authentication
      EMAIL_AUTH_ENABLED: ${EMAIL_AUTH_ENABLED:-true}
      EMAIL_SENDER: ${EMAIL_SENDER:-info@example.com}

      # Resend API Key. Required if email verification is enabled.
      # You can get your own key from https://resend.com/
      RESEND_API_KEY: ${RESEND_API_KEY:-}

      # GitHub Authentication
      GITHUB_AUTH_ENABLED: ${GITHUB_AUTH_ENABLED:-false}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL:-}


      # Google Authentication
      GOOGLE_AUTH_ENABLED: ${GOOGLE_AUTH_ENABLED:-false}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-}


      # Embeddings Configuration
      EMBEDDINGS_DIMENSIONS: ${EMBEDDINGS_DIMENSIONS:-768}
      EMBEDDINGS_BATCH_SIZE: ${EMBEDDINGS_BATCH_SIZE:-32}

      # Reranker Configuration
      RERANKER_TOP_N: ${RERANKER_TOP_N:-5}
      RERANKER_MODEL: ${RERANKER_MODEL:-jina-reranker-v2-base-multilingual}
      RERANKER_RELEVANCE_THRESHOLD: ${RERANKER_RELEVANCE_THRESHOLD:-0.5}


      # Skill Configuration
      SKILL_IDLE_TIMEOUT: ${SKILL_IDLE_TIMEOUT:-60000}
      SKILL_EXECUTION_TIMEOUT: ${SKILL_EXECUTION_TIMEOUT:-60000}

      # Stripe Configuration
      STRIPE_API_KEY: ${STRIPE_API_KEY:-}
      STRIPE_ACCOUNT_WEBHOOK_SECRET: ${STRIPE_ACCOUNT_WEBHOOK_SECRET:-}
      STRIPE_ACCOUNT_TEST_WEBHOOK_SECRET: ${STRIPE_ACCOUNT_TEST_WEBHOOK_SECRET:-}
      STRIPE_SESSION_SUCCESS_URL: ${STRIPE_SESSION_SUCCESS_URL:-}
      STRIPE_SESSION_CANCEL_URL: ${STRIPE_SESSION_CANCEL_URL:-}
      STRIPE_PORTAL_RETURN_URL: ${STRIPE_PORTAL_RETURN_URL:-}


      # Quota Configuration
      QUOTA_T1_TOKEN: ${QUOTA_T1_TOKEN:--1}
      QUOTA_T2_TOKEN: ${QUOTA_T2_TOKEN:--1}
      QUOTA_T1_REQUEST: ${QUOTA_T1_REQUEST:--1}
      QUOTA_T2_REQUEST: ${QUOTA_T2_REQUEST:--1}
      QUOTA_STORAGE_FILE: ${QUOTA_STORAGE_FILE:--1}
      QUOTA_STORAGE_OBJECT: ${QUOTA_STORAGE_OBJECT:--1}
      QUOTA_STORAGE_VECTOR: ${QUOTA_STORAGE_VECTOR:--1}
      QUOTA_FILE_PARSE_PAGE: ${QUOTA_FILE_PARSE_PAGE:--1}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5800"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
  web:
    image: reflyai/refly-web:0.4.2
   
    container_name: web
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    restart: always
    networks:
    - traefik-network
    - refly-network
    volumes:
    - '../conf/nginx.conf:/etc/nginx/conf.d/default.conf'
    ports:
      - 80
    environment:
      TZ: Asia/Shanghai
      API_URL: http://api:5800
      COLLAB_URL: http://api:5801
      STATIC_PUBLIC_ENDPOINT: http://api:5800/v1/misc/public
      STATIC_PRIVATE_ENDPOINT: http://api:5800/v1/misc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=refly-network"
      # http redirect to https
      - "traefik.http.routers.http.rule=Host(`refly.example.com`)"
      - "traefik.http.routers.http.entrypoints=web"
      - "traefik.http.routers.http.service=noop@internal"
      - "traefik.http.routers.http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # https
      - "traefik.http.routers.https.rule=Host(`refly.example.com`)"
      - "traefik.http.routers.https.entrypoints=websecure"
      - "traefik.http.routers.https.tls=true"
      - "traefik.http.routers.https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.https.service=web-secure"
      - "traefik.http.services.web-secure.loadbalancer.server.port=80"
      - "traefik.http.services.web-secure.loadbalancer.server.scheme=http"

volumes:
  db_data:
  minio_data:
  redis_data:
  qdrant_data:
  elasticsearch_data:

networks:
  refly-network:
    driver: bridge
    name: refly-network
  traefik-network:
    driver: bridge
    name: traefik-network      