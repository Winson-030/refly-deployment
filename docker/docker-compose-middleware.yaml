services:
  db:
    container_name: db
    image: postgres:16-alpine
    ports:
      - 5432
    restart: always
    shm_size: 128mb
    volumes:
      - db_data:/var/lib/postgresql/data
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    environment:
      TZ: Asia/Shanghai
      POSTGRES_DB: refly
      POSTGRES_USER: refly
      POSTGRES_PASSWORD: test
      POSTGRES_MAX_CONNECTIONS: 150
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1024MB
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U refly -d refly']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - refly-network
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    ports:
      - 9000
      - 9001
    volumes:
      - minio_data:/data
    environment:
      TZ: Asia/Shanghai
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # MINIO_DOMAIN: minio.example.com
      MINIO_COMPRESSION_ENABLE: 'on'
      MINIO_COMPRESSION_ALLOW_ENCRYPTION: 'off'
      MINIO_API_ROOT_ACCESS: 'on'
      # refs: https://min.io/docs/minio/linux/reference/minio-server/settings/console.html
      MINIO_BROWSER: 'on'
      MINIO_BROWSER_LOGIN_ANIMATION: 'off'
      MINIO_BROWSER_REDIRECT: 'false'
      MINIO_BROWSER_SESSION_DURATION: '365d'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  redis:
    container_name: redis
    image: redis/redis-stack:latest
    restart: always
    networks:
      - refly-network
    ports:
      - 6379
      - 8001
    volumes:
      - redis_data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --save 60 1000 --appendonly yes
    environment:
      TZ: Asia/Shanghai
      REDIS_PASSWORD: refly
      REDISTIMESERIES_ARGS: "RETENTION_POLICY=20"
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
  qdrant:
    container_name: qdrant
    image: reflyai/qdrant:v1.13.1
    networks:
      - refly-network
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    ports:
      - 6333
      - 6334
    volumes:
      - qdrant_data:/qdrant/storage:z
    restart: always
    environment:
      TZ: Asia/Shanghai
    healthcheck:
      test: ['CMD-SHELL', "curl -s http://localhost:6333/healthz | grep -q 'healthz check passed' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  elasticsearch:
    container_name: elasticsearch
    image: reflyai/elasticsearch:7.10.2
    networks:
      - refly-network
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
    ports:
      - 9200
    environment:
      TZ: Asia/Shanghai
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:-elasticpwd}
      cluster.name: es-cluster
      node.name: es-node01
      discovery.type: single-node
      xpack.license.self_generated.type: basic
      xpack.security.enabled: 'false'
      xpack.security.http.ssl.enabled: 'false'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'curl -s http://localhost:9200 >/dev/null || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  db_data:
  minio_data:
  redis_data:
  qdrant_data:
  elasticsearch_data:
   
